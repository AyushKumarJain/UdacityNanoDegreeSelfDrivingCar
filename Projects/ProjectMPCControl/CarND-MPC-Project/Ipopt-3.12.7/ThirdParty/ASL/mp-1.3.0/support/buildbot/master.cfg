# -*- python -*-
# ex: set syntax=python:

# This is a buildmaster config file. It must be installed as
# 'master.cfg' in buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
  BuildSlave("lucid32", "pass"),
  BuildSlave("lucid64", "pass"),
  BuildSlave("precise64", "pass"),
  BuildSlave("osx-ml", "pass"),
  BuildSlave("win2008", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES, BUILDERS AND SCHEDULERS

# The 'builders' list defines the Builders, which tell Buildbot how
# to perform a build: what steps, and which slaves can execute them.
#  Note that any particular build will only take place on one slave.

from buildbot.changes.gitpoller import GitPoller
from buildbot.process.factory import BuildFactory
from buildbot.config import BuilderConfig
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Test
from buildbot.steps.transfer import FileUpload
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from twisted.python import log
import os, re

def extract_warnings(step, line, match):
  file = "<unknown>"
  lineno = None
  message = line
  patterns = [
    r'(.+):([0-9]+):(?:[0-9]+:) (?:warning|note): (.+)',
    r'(.+):([0-9]+): warning: (.+)',
    r'(.+)\(([0-9]+)\): warning (.+)',
    r'(.+)() : warning (.+)']
  for p in patterns:
    m = re.match(p, line)
    if m:
      file = m.group(1)
      if m.group(2) != '':
        lineno = int(m.group(2))
      message = m.group(3)
      break
  file = file.strip().replace('\\', '/')
  #log.msg("warning file: {} line: {} message: {}".format(file, lineno, message))
  return (file, lineno, message)

platforms = {
  'linux32': 'lucid32',
  'linux64': 'lucid64',
  'osx'    : 'osx-ml',
  'win32'  : 'win2008',
  'win64'  : 'win2008'
}

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

def add_schedulers(project, builders):
  c['schedulers'].append(SingleBranchScheduler(
    name=project,
    change_filter=filter.ChangeFilter(project=project, branch='master'),
    treeStableTimer=None,
    builderNames=builders))
  c['schedulers'].append(ForceScheduler(
    name=project + "-force",
    builderNames=builders))

class Upload:
  def __init__(self, path, **kwargs):
    self.path = path
    self.platform = kwargs.get('platform')

def add_project(project, cmake_dir, uploads=[], extra_builders=[], **kwargs):
  """Adds change sources, builders and schedulers for a project."""
  url = kwargs.pop("url", "git://github.com/ampl/" + project + ".git")
  c['change_source'].append(
    GitPoller(url.replace("{master}", "localhost"), project=project,
      workdir='gitpoller-workdir-' + project, branch='master',
      pollinterval=120))
  builders = extra_builders[:]
  cmake_args = kwargs.pop("cmake_args", [])
  for platform, slave in platforms.iteritems():
    master_ip = "172.17.42.1" if platform.startswith("linux") else "10.0.2.2"
    adjusted_url = url.replace("{master}", master_ip)
    for debug in [False, True]:
      factory = BuildFactory()
      win32 = platform.startswith("win")
      # Get source.
      factory.addStep(Git(repourl=adjusted_url, mode="full", method="fresh"))
      if kwargs.pop("use_submodules", True):
        factory.addStep(ShellCommand(
          command=["git", "submodule", "update", "--init"], workdir="build"))
      # Configure.
      cmake_cmd = ["cmake"]
      if win32:
        cmake_cmd = [
          os.path.join(cmake_dir, "run-cmake"), "-G",
          "Visual Studio 10" + (" Win64" if platform == "win64" else "")]
      cmake_cmd += cmake_args
      if debug:
        cmake_cmd.append("-DCMAKE_BUILD_TYPE=Debug")
      # Unset MACOSX_DEPLOYMENT_TARGET to avoid CMake error.
      factory.addStep(Configure(command=cmake_cmd + ["."],
                                env={"MACOSX_DEPLOYMENT_TARGET": ""}))
      # Compile.
      compile_args = kwargs.copy()
      if not "command" in compile_args:
        compile_args["command"] = ["make", "all"]
      if win32:
        config = "/p:Configuration=" + ("Debug" if debug else "Release")
        extra_targets = compile_args["command"][2:]
        msbuild_cmd = ["run-msbuild", config, "/clp:NoSummary"]
        sln_file = project.upper().replace("-", "_") + ".sln"
        compile_args["command"] = msbuild_cmd + [sln_file]
      factory.addStep(Compile(**compile_args))
      if win32:
        for target in extra_targets:
          compile_args = compile_args.copy()
          cmd = compile_args["command"] = compile_args["command"][:]
          cmd[-1] = target + ".vcxproj"
          factory.addStep(Compile(**compile_args))
      # Run tests.
      test_cmd = ["make", "test"] if not win32 else \
                 msbuild_cmd + ["RUN_TESTS.vcxproj"]
      factory.addStep(Test(command=test_cmd, env={'CTEST_OUTPUT_ON_FAILURE': '1'},
        logfiles={"testlog": "Testing/Temporary/LastTest.log"}))
      # Upload files to master.
      if not debug:
        for upload in uploads:
          if isinstance(upload, basestring):
            upload = Upload(upload)
          path = upload.path
          if upload.platform and not platform.startswith(upload.platform):
            continue
          release = False # Whether file is in Release subdirectory.
          if win32:
            ext = os.path.splitext(path)[1]
            release = ext == "" or ext == ".dll"
            if ext == "":
              path += ".exe"
          dirname, filename = os.path.split(path)
          if release:
            path = os.path.join(dirname, "Release", filename)
          factory.addStep(FileUpload(slavesrc=path,
            masterdest=os.path.join("~", "upload", platform, filename),
            mode=0755))
      # Create builder.
      builder = project + "-" + platform + ("-debug" if debug else "")
      builders.append(builder)
      c['builders'].append(BuilderConfig(name=builder,
        category=project, slavenames=[slave], factory=factory))
  add_schedulers(project, builders)

# AMPL
uploads = [
  "bin/amplgsl.dll",
  "src/gsl/gsl.ampl",
  "bin/ampltabl.dll",
  "src/cp/cp.ampl",
  "bin/cp.dll",
  "bin/gecode",
  "solvers/gecode/gecode.ampl",
  "bin/jacop",
  "bin/ampljacop.jar",
  "thirdparty/jacop/jacop-4.1.0.jar",
  "bin/localsolver",
  Upload("bin/localsolver.dll", platform="win"),
  "bin/path",
  Upload("bin/path47.dll", platform="win"),
  "versions.txt"]

for basename in ['amplfunc', 'spamfunc']:
  name = 'bin/' + basename + '.mex'
  uploads += [
    Upload(name + "a64", platform="linux64"),
    Upload(name + "w32", platform="win32"),
    Upload(name + "w64", platform="win64"),
    Upload(name + "maci64", platform="osx")]

add_project("mp", "support/cmake", uploads, ["x-build-docs"],
    cmake_args=["-DBUILD=all"],
    command=["make", "all", "versions"],
    warningPattern='.*[Ww]arning.*',
    warningExtractor=extract_warnings,
    suppressionFile="support/buildbot/warnings.supp")

factory = BuildFactory()
# check out the source
factory.addStep(ShellCommand(command=['rm', '-rf', 'build'], workdir='.'))
factory.addStep(ShellCommand(command=[
  'git', 'clone', 'git@github.com:ampl/ampl.git', '.']))
# build docs
factory.addStep(ShellCommand(command=["support/build-docs.py"]))
# push changes to GitHub
factory.addStep(ShellCommand(command=["git", "push"],
                             workdir='build/ampl.github.io'))

c['builders'].append(
    BuilderConfig(name="x-build-docs", category="mp",
      slavenames=["precise64"], factory=factory))

# COIN-OR solvers (built separately because very time consuming).
uploads = [
  "bin/cbc",
  "bin/ipopt",
  Upload("bin/libipoptfort.dll", platform="win"),
  "bin/bonmin",
  "bin/couenne",
  "coin-versions.txt"]
add_project("coin", "ThirdParty/mp/support/cmake", uploads,
  command=["make", "all", "coin-versions"], warningPattern='.*[Ww]warning.*')

# Licensing code.
# We use the BuildBot's web server for private Git repos to avoid the
# need to configure a separate web server.
uploads = [
  Upload("libampl-lic.so", platform="linux"),
  Upload("libampl-lic.dylib", platform="osx"),
  Upload("ampl-lic.dll", platform="win")]
add_project("ampl-license", "cmake", uploads,
  url="http://{master}:8010/ampl-license.git", use_submodules=False)

add_project("gsl", "cmake", warningPattern='.*[Ww]warning.*')

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "AMPL"
c['titleURL'] = "https://github.com/ampl/mp"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
