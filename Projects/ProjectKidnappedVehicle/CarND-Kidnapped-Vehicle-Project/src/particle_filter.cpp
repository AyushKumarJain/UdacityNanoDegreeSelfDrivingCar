/**
 * particle_filter.cpp
 *
 * Created on: Dec 12, 2016
 * Author: Tiffany Huang
 */

#include "particle_filter.h"

#include <math.h>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <random>
#include <string>
#include <vector>
#include <sstream>
#include <limits>

#include "helper_functions.h"

using std::string;
using std::vector;
using namespace std;

void ParticleFilter::init(double x, double y, double theta, double std[]) {
  /**
   * TODO: Set the number of particles. Initialize all particles to 
   *   first position (based on estimates of x, y, theta and their uncertainties
   *   from GPS) and all weights to 1. 
   * TODO: Add random Gaussian noise to each particle.
   * NOTE: Consult particle_filter.h for more information about this method 
   *   (and others in this file).
   */
  // num_particles = 0;  // TODO: Set the number of particles
  // Create an default_random_engine object
  default_random_engine gen;

  // Create variable to store standard deviations for x, y, and theta
  double std_x, std_y, std_theta;
	
  // Set standard deviations for x, y, and theta.
  std_x = std[0];
  std_y = std[1];
  std_theta = std[2];
	
  // We use normal_distribution object to store normal distributions for x, y and theta, generated by dist_x, dist_y and dist_theta respectively.
  normal_distribution<double> dist_x(x, std_x);
  normal_distribution<double> dist_y(y, std_y);
  normal_distribution<double> dist_theta(theta, std_theta);
		
  // Set the number of particles
  num_particles = 100;
	
  // Initialize particles 
  for (unsigned int i = 0; i < num_particles; ++i) {
  	// double sample_x, sample_y, sample_theta;		
	// "gen" is the random engine initialized earlier.
    // Create a particle with each iteration, give it an id, given it an x, y and theta normal distribution
    // give weightage to each particle and then store them in a list "particles" and "weights"
	Particle particle;
	particle.id = i;
	particle.x = dist_x(gen);
	particle.y = dist_y(gen);
	particle.theta = dist_theta(gen);
	particle.weight = 1.0;
	particles.push_back(particle);
	weights.push_back(particle.weight);
  }
  is_initialized = true;

}

void ParticleFilter::prediction(double delta_t, double std_pos[], 
                                double velocity, double yaw_rate) {
  /**
   * TODO: Add measurements to each particle and add random Gaussian noise.
   * NOTE: When adding noise you may find std::normal_distribution 
   *   and std::default_random_engine useful.
   *  http://en.cppreference.com/w/cpp/numeric/random/normal_distribution
   *  http://www.cplusplus.com/reference/random/default_random_engine/
   */
  // Again we create an default_random_engine object
  default_random_engine gen;

  // Below for loop add's measurements and gaussian noise to each particle
  for (unsigned int i = 0; i < num_particles; ++i)
  {
    // We take the ith particle and considering the current angle, velocity and yawrate, we do prediction 
    double theta0 = particles[i].theta;
    if(abs(yaw_rate) < 0.0001){
      particles[i].x += velocity*cos(theta0)*delta_t;
      particles[i].y += velocity*sin(theta0)*delta_t;
    }
    else {
      particles[i].theta += yaw_rate*delta_t;
      particles[i].x += (velocity/yaw_rate)*(sin(particles[i].theta) - sin(theta0));
      particles[i].y += (velocity/yaw_rate)*(cos(theta0) - cos(particles[i].theta));
    }

    // Once we got predicted states, we create normal distributions for x, y and theta around the new mean predictions
    normal_distribution<double> dist_x(particles[i].x, std_pos[0]);
    normal_distribution<double> dist_y(particles[i].y, std_pos[1]);
    normal_distribution<double> dist_theta(particles[i].theta, std_pos[2]);

    // We then set x, y and theta to noisy predictions, i.e. dist_x(gen) will give us a value from the distribution around new mean prediction of x.
    // Note: distributions are centered around the new mean predictions so we assign (=) 
    // the new values instead of adding (+=)
    particles[i].x = dist_x(gen);
    particles[i].y = dist_y(gen);
    particles[i].theta = dist_theta(gen);
  }
}

// The output of this function is the identification of landmarks, it is done by using the predicted and observated landmark observations
void ParticleFilter::dataAssociation(vector<LandmarkObs> predicted, 
                                     vector<LandmarkObs>& observations) {
  /**
   * TODO: Find the predicted measurement that is closest to each 
   *   observed measurement and assign the observed measurement to this 
   *   particular landmark.
   * NOTE: this method will NOT be called by the grading code. But you will 
   *   probably find it useful to implement this method and use it as a helper 
   *   during the updateWeights phase.
   */
  // We loop over all the observations
  for (unsigned int i = 0; i < observations.size(); ++i) {

    // We start with the first current observation i.e i=1
    LandmarkObs obs_curr = observations[i];

    // Here we set the maximum distance to which we will consider the observation
    // For this purpose, we initialize minimum distance to max value
    double dist_min = numeric_limits<double>::max();

    // Initialize map_id
    int map_id = -1;
	
    // We iterate over the list of predictions to find distance with the ith observation
    for (unsigned int j = 0; j < predicted.size(); ++j) {
      // We take the first current prediction, i.e. j=1
      LandmarkObs pred_curr = predicted[j];

      // Then calculate distance between current ith observation and jth landmark
      double dist_curr = dist(obs_curr.x, obs_curr.y, pred_curr.x, pred_curr.y);

      // We compare the distance threshold (dist_min), if dis_curr is small then store the current prediction id of the nearest landmark
      if (dist_curr < dist_min) {
        dist_min = dist_curr;
        map_id = pred_curr.id;
      }
    }
    // The final map_id that we receive after iterating over all the predictions, then we link that observation id to that of nearest landmark
    observations[i].id = map_id;
  }
}

void ParticleFilter::updateWeights(double sensor_range, double std_landmark[], 
                                   const vector<LandmarkObs> &observations, 
                                   const Map &map_landmarks) {
  /**
   * TODO: Update the weights of each particle using a mult-variate Gaussian 
   *   distribution. You can read more about this distribution here: 
   *   https://en.wikipedia.org/wiki/Multivariate_normal_distribution
   * NOTE: The observations are given in the VEHICLE'S coordinate system. 
   *   Your particles are located according to the MAP'S coordinate system. 
   *   You will need to transform between the two systems. Keep in mind that
   *   this transformation requires both rotation AND translation (but no scaling).
   *   The following is a good resource for the theory:
   *   https://www.willamette.edu/~gorr/classes/GeneralGraphics/Transforms/transforms2d.htm
   *   and the following is a good resource for the actual equation to implement
   *   (look at equation 3.33) http://planning.cs.uiuc.edu/node99.html
   */
  
  // We iterate over all the particles
  for (unsigned int i = 0; i < particles.size(); ++i)
  {
    // int id_particle = particles[i].id;
    // For each particle we retrieve, x, y and theta value.
    double x_particle = particles[i].x;
    double y_particle = particles[i].y;
    double theta_particle = particles[i].theta;
    particles[i].weight = 1.0;

    // We then create a placeholder for the transformed observations		
    std::vector<LandmarkObs> observations_map;
    LandmarkObs lnd_obs;

    // As we get observation in car coordinate system, 
    // we need to transform individual observations from car to particle coordinate system
    // So we iterate over all the car coordinate system observations to convert them to particle coordinate system
    for (unsigned int j = 0; j < observations.size(); ++j)
    {
      // Retrieve information about jth observation. Note here, observation id is used for checking if a landmark has been found or not
      lnd_obs.id = observations[j].id; 
      lnd_obs.x = observations[j].x*cos(theta_particle) - observations[j].y*sin(theta_particle) + x_particle;
      lnd_obs.y = observations[j].x*sin(theta_particle) + observations[j].y*cos(theta_particle) + y_particle;
      // Save the transformed observation in observations_map
      observations_map.push_back(lnd_obs);
    }

    // Create a placeholder for landmarks in sensor range
    vector<LandmarkObs> predictions;
    
    // In this for loop, we retrieve maps landmark and find distance to that of particle, 
    // If distance is less than the sensor_range, we store it in predictions list
    for (unsigned int j = 0; j < map_landmarks.landmark_list.size(); ++j) {

      // Here, we store landmark x, y, id in LandMarkObs struct
      lnd_obs.x = map_landmarks.landmark_list[j].x_f;
      lnd_obs.y = map_landmarks.landmark_list[j].y_f;
      lnd_obs.id = map_landmarks.landmark_list[j].id_i;

      // If landmark is in sensor range from ith particle, we append landmark to predictions vector
      if (dist(lnd_obs.x, lnd_obs.y, x_particle, y_particle) <= sensor_range) {
        predictions.push_back(lnd_obs);
      }
    }

    // Here we use dataAssociation function for finding nearest landmarks to observations
    // It gives the nearest landmark to each observation
    dataAssociation(predictions, observations_map);

    // Now we update weights based on particle observations and actual observations
    for (unsigned int j = 0; j < observations_map.size(); ++j) {

      // Retrieving information about nearest landmark id or so to say the first observation from the map
      int lm_id = observations_map[j].id;
      double lm_x, lm_y;

      // Setting nearest landmark coordinates by comparing it with jth observation
      for (unsigned int k = 0; k < predictions.size(); ++k) {
        if (predictions[k].id == lm_id) {
          lm_x = predictions[k].x;
          lm_y = predictions[k].y;
        }
      }

      // Observed coordinates
      double o_x = observations_map[j].x;
      double o_y = observations_map[j].y;

      // Calculate importance weight with multivariate Gaussian
      double sig_x = std_landmark[0];
      double sig_y = std_landmark[1];
      double w_ = ( 1/(2*M_PI*sig_x*sig_y)) * exp( -( pow(lm_x-o_x,2)/(2*pow(sig_x, 2)) + (pow(lm_y-o_y,2)/(2*pow(sig_y, 2))) ) );

      // Update particle weight for this observation
      particles[i].weight *= w_;
    }
    // Updates weights vector
    weights[i] = particles[i].weight;
  }
}

void ParticleFilter::resample() {
  /**
   * TODO: Resample particles with replacement with probability proportional 
   *   to their weight. 
   * NOTE: You may find std::discrete_distribution helpful here.
   *   http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution
   */
  default_random_engine gen;
  // Create a discrete_distribution object to store distance
  discrete_distribution<int> dist(weights.begin(), weights.end());

  // Create a placeholder for storing resampled particles
  vector<Particle> resampled_particles;

  // Below is the for loop to resample particles according to their weights
  for (unsigned int i = 0; i < num_particles; ++i)
  {
    resampled_particles.push_back(particles[dist(gen)]);
  }

  // Finally update particles with resampled particles
  particles = resampled_particles;

}

void ParticleFilter::SetAssociations(Particle& particle, 
                                     const vector<int>& associations, 
                                     const vector<double>& sense_x, 
                                     const vector<double>& sense_y) {
  // particle: the particle to which assign each listed association, 
  //   and association's (x,y) world coordinates mapping
  // associations: The landmark id that goes along with each listed association
  // sense_x: the associations x mapping already converted to world coordinates
  // sense_y: the associations y mapping already converted to world coordinates
  particle.associations= associations;
  particle.sense_x = sense_x;
  particle.sense_y = sense_y;
}

string ParticleFilter::getAssociations(Particle best) {
  vector<int> v = best.associations;
  std::stringstream ss;
  copy(v.begin(), v.end(), std::ostream_iterator<int>(ss, " "));
  string s = ss.str();
  s = s.substr(0, s.length()-1);  // get rid of the trailing space
  return s;
}

// string ParticleFilter::getSenseX(Particle best)
// {
// 	vector<double> v = best.sense_x;
// 	std::stringstream ss;
//     copy( v.begin(), v.end(), ostream_iterator<float>(ss, " "));
//     string s = ss.str();
//     s = s.substr(0, s.length()-1);  // get rid of the trailing space
//     return s;
// }

// string ParticleFilter::getSenseY(Particle best)
// {
// 	vector<double> v = best.sense_y;
// 	std::stringstream ss;
//     copy( v.begin(), v.end(), ostream_iterator<float>(ss, " "));
//     string s = ss.str();
//     s = s.substr(0, s.length()-1);  // get rid of the trailing space
//     return s;
// }

string ParticleFilter::getSenseCoord(Particle best, string coord) {
  vector<double> v;

  if (coord == "X") {
    v = best.sense_x;
  } else {
    v = best.sense_y;
  }

  std::stringstream ss;
  copy(v.begin(), v.end(), std::ostream_iterator<float>(ss, " "));
  string s = ss.str();
  s = s.substr(0, s.length()-1);  // get rid of the trailing space
  return s;
}